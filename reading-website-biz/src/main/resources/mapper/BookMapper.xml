<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.reading.website.biz.mapper.BookMapper">
  <resultMap id="BaseResultMap" type="com.reading.website.api.domain.BookDO">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="updated" jdbcType="TIMESTAMP" property="updated" />
    <result column="isDeleted" jdbcType="BIT" property="isDeleted" />
    <result column="bookName" jdbcType="VARCHAR" property="bookName" />
    <result column="bookPic" jdbcType="VARCHAR" property="bookPic" />
    <result column="authorId" jdbcType="INTEGER" property="authorId" />
    <result column="authorName" jdbcType="VARCHAR" property="authorName" />
    <result column="isPublished" jdbcType="BIT" property="isPublished" />
    <result column="isOver" jdbcType="BIT" property="isOver" />
    <result column="smallCateId" jdbcType="INTEGER" property="smallCateId" />
    <result column="bookPath" jdbcType="VARCHAR" property="bookPath" />
    <result column="buyPath" jdbcType="VARCHAR" property="buyPath" />
    <result column="postedTime" jdbcType="TIMESTAMP" property="postedTime" />
    <result column="bookDesc" jdbcType="VARCHAR" property="bookDesc" />
    <result column="chapNum" jdbcType="INTEGER" property="chapNum" />
    <result column="ext" jdbcType="VARCHAR" property="ext" />
  </resultMap>
  <sql id="Base_Column_List">
    id, created, updated, isDeleted, bookName, bookPic, authorId, authorName, isPublished,
    isOver, smallCateId, bookPath, buyPath, postedTime, bookDesc, chapNum, ext
  </sql>
  
  <!-- 查询新的图书 -->
  <select id="listNewlyBooks" resultMap="BaseResultMap" parameterType="com.reading.website.api.base.Page">
    select
    b.id, b.created, b.updated, b.isDeleted, bookName, bookPic, authorId, authorName, isPublished,
    isOver, smallCateId, bookPath, buyPath, postedTime, bookDesc, chapNum, ext
    from Book as b
    left outer join BookGradeInfo as g
    on b.id = g.bookId
    where b.isDeleted = 0
    order by postedTime desc, g.readCount desc, created desc
    limit #{offset},#{pageSize}
  </select>

  <!-- 查询受欢迎的图书 -->
  <select id="listFavorableBooks" resultMap="BaseResultMap" parameterType="com.reading.website.api.base.Page">
    select
    b.id, b.created, b.updated, b.isDeleted, bookName, bookPic, authorId, authorName, isPublished,
    isOver, smallCateId, bookPath, buyPath, postedTime, bookDesc, chapNum, ext
    from Book as b
    left outer join BookGradeInfo as g
    on b.id = g.bookId
    where b.isDeleted = 0
    order by g.fiveNum desc, g.fourNum desc, g.threeNum desc, g.twoNum desc, g.oneNum desc
    limit #{offset},#{pageSize}
  </select>

  <!-- 查询经典的图书 -->
  <select id="listClassicBooks" resultMap="BaseResultMap" parameterType="com.reading.website.api.base.Page">
    select
    b.id, b.created, b.updated, b.isDeleted, bookName, bookPic, authorId, authorName, isPublished,
    isOver, smallCateId, bookPath, buyPath, postedTime, bookDesc, chapNum, ext
    from Book as b
    left outer join BookGradeInfo as g
    on b.id = g.bookId
    where b.isDeleted = 0
    order by postedTime asc, g.readCount desc, created asc
    limit #{offset},#{pageSize}
  </select>

  <!-- 分页查询 -->
  <select id="pageQuery" resultMap="BaseResultMap" parameterType="com.reading.website.api.domain.BookInfoQuery">
    select
    <include refid="Base_Column_List" />
    from Book
    <include refid="whereClause"/>
    limit #{offset},#{pageSize}
  </select>

  <!-- 条件查询 -->
  <select id="selectSelective" resultMap="BaseResultMap" parameterType="com.reading.website.api.domain.BookInfoQuery">
    select
    <include refid="Base_Column_List" />
    from Book
    <include refid="whereClause"/>
  </select>

  <!-- insertOrUpdate -->
  <insert id="insertOrUpdate" useGeneratedKeys="true" keyProperty="id" parameterType="com.reading.website.api.domain.BookDO">
    insert into Book
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="updated != null">
        updated,
      </if>
      <if test="isDeleted != null">
        isDeleted,
      </if>
      <if test="bookName != null">
        bookName,
      </if>
      <if test="bookPic != null">
        bookPic,
      </if>
      <if test="authorId != null">
        authorId,
      </if>
      <if test="authorName != null">
        authorName,
      </if>
      <if test="isPublished != null">
        isPublished,
      </if>
      <if test="isOver != null">
        isOver,
      </if>
      <if test="smallCateId != null">
        smallCateId,
      </if>
      <if test="bookPath != null">
        bookPath,
      </if>
      <if test="buyPath != null">
        buyPath,
      </if>
      <if test="postedTime != null">
        postedTime,
      </if>
      <if test="bookDesc != null">
        bookDesc,
      </if>
      <if test="chapNum != null">
        chapNum,
      </if>
      <if test="ext != null">
        ext,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        #{isDeleted,jdbcType=BIT},
      </if>
      <if test="bookName != null">
        #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookPic != null">
        #{bookPic,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null">
        #{authorId,jdbcType=INTEGER},
      </if>
      <if test="authorName != null">
        #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="isPublished != null">
        #{isPublished,jdbcType=BIT},
      </if>
      <if test="isOver != null">
        #{isOver,jdbcType=BIT},
      </if>
      <if test="smallCateId != null">
        #{smallCateId,jdbcType=INTEGER},
      </if>
      <if test="bookPath != null">
        #{bookPath,jdbcType=VARCHAR},
      </if>
      <if test="buyPath != null">
        #{buyPath,jdbcType=VARCHAR},
      </if>
      <if test="postedTime != null">
        #{postedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookDesc != null">
        #{bookDesc,jdbcType=VARCHAR},
      </if>
      <if test="chapNum != null">
        #{chapNum,jdbcType=INTEGER},
      </if>
      <if test="ext != null">
        #{ext,jdbcType=VARCHAR},
      </if>
    </trim>
    ON DUPLICATE KEY UPDATE
    <trim suffixOverrides=",">
      <if test="updated != null">
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="isDeleted != null">
        isDeleted = #{isDeleted,jdbcType=BIT},
      </if>
      <if test="bookName != null">
        bookName = #{bookName,jdbcType=VARCHAR},
      </if>
      <if test="bookPic != null">
        bookPic = #{bookPic,jdbcType=VARCHAR},
      </if>
      <if test="authorId != null">
        authorId = #{authorId,jdbcType=INTEGER},
      </if>
      <if test="authorName != null">
        authorName = #{authorName,jdbcType=VARCHAR},
      </if>
      <if test="isPublished != null">
        isPublished = #{isPublished,jdbcType=BIT},
      </if>
      <if test="isOver != null">
        isOver = #{isOver,jdbcType=BIT},
      </if>
      <if test="smallCateId != null">
        smallCateId = #{smallCateId,jdbcType=INTEGER},
      </if>
      <if test="bookPath != null">
        bookPath = #{bookPath,jdbcType=VARCHAR},
      </if>
      <if test="buyPath != null">
        buyPath = #{buyPath,jdbcType=VARCHAR},
      </if>
      <if test="postedTime != null">
        postedTime = #{postedTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bookDesc != null">
        bookDesc = #{bookDesc,jdbcType=VARCHAR},
      </if>
      <if test="chapNum != null">
        chapNum = #{chapNum,jdbcType=INTEGER},
      </if>
      <if test="ext != null">
        ext = #{ext,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>

  <!-- 批量新增 -->
  <insert id="batchInsert" parameterType="list">
    insert into Book(bookName, bookPic, authorId, authorName, isPublished,
    isOver, smallCateId, bookPath, buyPath, postedTime, bookDesc, chapNum, ext)
    values
    <foreach collection="list" item="item" index="index" separator="," close=";">
      (
        #{item.bookName},
        #{item.bookPic},
        #{item.authorId},
        #{item.authorName},
        #{item.isPublished},
        #{item.isOver},
        #{item.smallCateId},
        #{item.bookPath},
        #{item.buyPath},
        #{item.postedTime},
        #{item.bookDesc},
        #{item.chapNum},
        #{item.ext}
      )
    </foreach>
  </insert>

  <!-- 计数 -->
  <select id="countSelective" resultType="java.lang.Integer" parameterType="com.reading.website.api.domain.BookInfoQuery">
    select count(1)
    from Book
    <include refid="whereClause"/>
  </select>

  <!-- 条件子句 -->
  <sql id="whereClause">
    where isDeleted = 0
    <if test="id != null">
      and id = #{id,jdbcType=BIGINT}
    </if>
    <if test="bookIds != null">
      and id in
      <foreach collection="bookIds" index="index" item="item" open="(" close=")" separator=",">
        #{item,jdbcType=INTEGER}
      </foreach>
    </if>
    <if test="bookName != null">
      and bookName LIKE concat(concat('%',#{bookName,jdbcType=VARCHAR}),'%')
    </if>
    <if test="authorId != null">
      and authorId = #{authorId,jdbcType=INTEGER}
    </if>
    <if test="authorName != null">
      and authorName = #{authorName,jdbcType=VARCHAR}
    </if>
    <if test="isPublished != null">
      and isPublished = #{isPublished,jdbcType=BIT}
    </if>
    <if test="isOver != null">
      and isOver = #{isOver,jdbcType=BIT}
    </if>
    <if test="smallCateId != null">
      and smallCateId = #{smallCateId,jdbcType=INTEGER}
    </if>
    <if test="postedTime != null">
      and postedTime = #{postedTime,jdbcType=TIMESTAMP}
    </if>
  </sql>
</mapper>